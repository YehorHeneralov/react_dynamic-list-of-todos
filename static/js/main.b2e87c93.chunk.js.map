{"version":3,"sources":["types/typeOfFilter.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TypeOfFilter","TodoList","props","todos","selectedTodo","setSelectedTodo","className","map","todo","id","completed","cn","title","onClick","type","TodoFilter","querry","setQuerry","setTypeFilter","onChange","event","target","value","All","Active","Complited","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","finally","message","href","email","name","App","setTodos","typeFilter","filteredTodos","useMemo","copy","filter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2e87c93.chunk.js","sourcesContent":["export enum TypeOfFilter {\n  All = 'all',\n  Active = 'active',\n  Complited = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  setSelectedTodo: (value: Todo) => void,\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, selectedTodo, setSelectedTodo } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            // className={cn({ 'has-background-info-light': todo.completed })}\n            // className='has-background-info-light'\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed\n                && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                onClick={() => setSelectedTodo(todo)}\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n              >\n                <span className=\"icon\">\n                  <i className={cn('far', {\n                    'fa-eye-slash': selectedTodo?.id === todo.id,\n                    'fa-eye': selectedTodo?.id !== todo.id,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FC } from 'react';\nimport { TypeOfFilter } from '../../types/typeOfFilter';\n\ninterface Props {\n  querry: string;\n  setQuerry: (value: string) => void;\n  setTypeFilter: (value: TypeOfFilter) => void;\n}\n\nexport const TodoFilter: FC<Props> = (props) => {\n  const { querry, setQuerry, setTypeFilter } = props;\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={event => (\n              setTypeFilter(event.target.value as TypeOfFilter)\n            )}\n          >\n            <option value={TypeOfFilter.All}>All</option>\n            <option value={TypeOfFilter.Active}>Active</option>\n            <option value={TypeOfFilter.Complited}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={querry}\n          onChange={(event) => setQuerry(event.target.value)}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n\n          {querry && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuerry('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  selectedTodo: Todo;\n  setSelectedTodo: (value: Todo | null) => void;\n}\n\nexport const TodoModal: React.FC<Props> = (props) => {\n  const { selectedTodo, setSelectedTodo } = props;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(selectedTodo.userId)\n      .then(setUser)\n      .finally(() => setIsLoading(false));\n  }, [selectedTodo.userId]);\n\n  const message = selectedTodo.completed ? 'Done' : 'Planned';\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {selectedTodo && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => setSelectedTodo(null)}\n              />\n            )}\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn({\n                'has-text-danger': !selectedTodo.completed,\n                'has-text-success': selectedTodo.completed,\n              })}\n              >\n                {message}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n// import { User } from './types/User';\nimport './App.scss';\nimport { TypeOfFilter } from './types/typeOfFilter';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [querry, setQuerry] = useState<string>('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [typeFilter, setTypeFilter] = useState<TypeOfFilter>(TypeOfFilter.All);\n\n  const filteredTodos = useMemo(() => {\n    let copy = [...todos];\n\n    if (querry) {\n      copy = copy.filter(todo => todo.title.toLowerCase().includes(querry.toLowerCase()));\n    }\n\n    if (typeFilter === TypeOfFilter.Active) {\n      copy = copy.filter(todo => !todo.completed);\n    }\n\n    if (typeFilter === TypeOfFilter.Complited) {\n      copy = copy.filter(todo => todo.completed);\n    }\n\n    return copy;\n  }, [todos, querry, typeFilter]);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setQuerry={setQuerry}\n                querry={querry}\n                setTypeFilter={setTypeFilter}\n\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodo={selectedTodo}\n                  setSelectedTodo={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}